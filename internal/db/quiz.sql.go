// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: quiz.sql

package db

import (
	"context"
	"database/sql"
)

const createNewQuiz = `-- name: CreateNewQuiz :one
INSERT INTO
    quiz (q_id, a_id, date)
VALUES (?, ?, Date("now")) RETURNING id, q_id, a_id, date, is_active, options_json
`

type CreateNewQuizParams struct {
	QID int64 `json:"q_id"`
	AID int64 `json:"a_id"`
}

func (q *Queries) CreateNewQuiz(ctx context.Context, arg CreateNewQuizParams) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, createNewQuiz, arg.QID, arg.AID)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.QID,
		&i.AID,
		&i.Date,
		&i.IsActive,
		&i.OptionsJson,
	)
	return i, err
}

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO
    questions (
        question,
        correct_answer,
        a_answer,
        b_answer,
        c_answer,
        d_answer
    )
VALUES (?, ?, ?, ?, ?, ?) RETURNING id, question, correct_answer, timestamp, is_active, a_answer, b_answer, c_answer, d_answer
`

type CreateQuestionParams struct {
	Question      string `json:"question"`
	CorrectAnswer string `json:"correct_answer"`
	AAnswer       string `json:"a_answer"`
	BAnswer       string `json:"b_answer"`
	CAnswer       string `json:"c_answer"`
	DAnswer       string `json:"d_answer"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion,
		arg.Question,
		arg.CorrectAnswer,
		arg.AAnswer,
		arg.BAnswer,
		arg.CAnswer,
		arg.DAnswer,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.CorrectAnswer,
		&i.Timestamp,
		&i.IsActive,
		&i.AAnswer,
		&i.BAnswer,
		&i.CAnswer,
		&i.DAnswer,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email) VALUES (?, ?) RETURNING id, username, email, timestamp
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Timestamp,
	)
	return i, err
}

const getAttemptByID = `-- name: GetAttemptByID :one
SELECT id, user_id, quiz_id, answer, is_correct, timestamp FROM attempts WHERE id = ?
`

func (q *Queries) GetAttemptByID(ctx context.Context, id int64) (Attempt, error) {
	row := q.db.QueryRowContext(ctx, getAttemptByID, id)
	var i Attempt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuizID,
		&i.Answer,
		&i.IsCorrect,
		&i.Timestamp,
	)
	return i, err
}

const getAttempts = `-- name: GetAttempts :many
SELECT id, user_id, quiz_id, answer, is_correct, timestamp FROM attempts
`

func (q *Queries) GetAttempts(ctx context.Context) ([]Attempt, error) {
	rows, err := q.db.QueryContext(ctx, getAttempts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attempt
	for rows.Next() {
		var i Attempt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.QuizID,
			&i.Answer,
			&i.IsCorrect,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttemptsByUserID = `-- name: GetAttemptsByUserID :many
SELECT id, user_id, quiz_id, answer, is_correct, timestamp FROM attempts WHERE user_id = ?
`

func (q *Queries) GetAttemptsByUserID(ctx context.Context, userID int64) ([]Attempt, error) {
	rows, err := q.db.QueryContext(ctx, getAttemptsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attempt
	for rows.Next() {
		var i Attempt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.QuizID,
			&i.Answer,
			&i.IsCorrect,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeaderBoard = `-- name: GetLeaderBoard :many
SELECT u.username, u.email, l.id, l.user_id, l.total_score, l.last_updated
FROM leader_board l
    Left Join users u ON u.id = l.user_id
`

type GetLeaderBoardRow struct {
	Username    sql.NullString `json:"username"`
	Email       sql.NullString `json:"email"`
	ID          int64          `json:"id"`
	UserID      int64          `json:"user_id"`
	TotalScore  sql.NullInt64  `json:"total_score"`
	LastUpdated sql.NullTime   `json:"last_updated"`
}

func (q *Queries) GetLeaderBoard(ctx context.Context) ([]GetLeaderBoardRow, error) {
	rows, err := q.db.QueryContext(ctx, getLeaderBoard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderBoardRow
	for rows.Next() {
		var i GetLeaderBoardRow
		if err := rows.Scan(
			&i.Username,
			&i.Email,
			&i.ID,
			&i.UserID,
			&i.TotalScore,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeaderBoardByUserID = `-- name: GetLeaderBoardByUserID :one
SELECT u.username, u.email, l.id, l.user_id, l.total_score, l.last_updated
FROM leader_board l
    Left Join users u ON u.id = l.user_id
WHERE
    l.user_id = ?
`

type GetLeaderBoardByUserIDRow struct {
	Username    sql.NullString `json:"username"`
	Email       sql.NullString `json:"email"`
	ID          int64          `json:"id"`
	UserID      int64          `json:"user_id"`
	TotalScore  sql.NullInt64  `json:"total_score"`
	LastUpdated sql.NullTime   `json:"last_updated"`
}

func (q *Queries) GetLeaderBoardByUserID(ctx context.Context, userID int64) (GetLeaderBoardByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getLeaderBoardByUserID, userID)
	var i GetLeaderBoardByUserIDRow
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.ID,
		&i.UserID,
		&i.TotalScore,
		&i.LastUpdated,
	)
	return i, err
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, question, correct_answer, timestamp, is_active, a_answer, b_answer, c_answer, d_answer FROM questions WHERE id = ?
`

func (q *Queries) GetQuestion(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.CorrectAnswer,
		&i.Timestamp,
		&i.IsActive,
		&i.AAnswer,
		&i.BAnswer,
		&i.CAnswer,
		&i.DAnswer,
	)
	return i, err
}

const getQuestions = `-- name: GetQuestions :many
SELECT id, question, correct_answer, timestamp, is_active, a_answer, b_answer, c_answer, d_answer FROM questions
`

func (q *Queries) GetQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Question,
			&i.CorrectAnswer,
			&i.Timestamp,
			&i.IsActive,
			&i.AAnswer,
			&i.BAnswer,
			&i.CAnswer,
			&i.DAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuizByID = `-- name: GetQuizByID :one
SELECT quiz.id as quiz_id, questions.id, questions.question, questions.correct_answer, questions.timestamp, questions.is_active, questions.a_answer, questions.b_answer, questions.c_answer, questions.d_answer
FROM quiz
    LEFT JOIN questions on questions.id = quiz.q_id
WHERE
    quiz.id = ?
`

type GetQuizByIDRow struct {
	QuizID        int64          `json:"quiz_id"`
	ID            sql.NullInt64  `json:"id"`
	Question      sql.NullString `json:"question"`
	CorrectAnswer sql.NullString `json:"correct_answer"`
	Timestamp     sql.NullTime   `json:"timestamp"`
	IsActive      sql.NullBool   `json:"is_active"`
	AAnswer       sql.NullString `json:"a_answer"`
	BAnswer       sql.NullString `json:"b_answer"`
	CAnswer       sql.NullString `json:"c_answer"`
	DAnswer       sql.NullString `json:"d_answer"`
}

func (q *Queries) GetQuizByID(ctx context.Context, id int64) (GetQuizByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getQuizByID, id)
	var i GetQuizByIDRow
	err := row.Scan(
		&i.QuizID,
		&i.ID,
		&i.Question,
		&i.CorrectAnswer,
		&i.Timestamp,
		&i.IsActive,
		&i.AAnswer,
		&i.BAnswer,
		&i.CAnswer,
		&i.DAnswer,
	)
	return i, err
}

const getQuizOfTheDay = `-- name: GetQuizOfTheDay :one
SELECT quiz.id as quiz_id, questions.id, questions.question, questions.correct_answer, questions.timestamp, questions.is_active, questions.a_answer, questions.b_answer, questions.c_answer, questions.d_answer
FROM quiz
    LEFT JOIN questions on questions.id = quiz.q_id
WHERE
    DATE(quiz.date) = DATE('now')
`

type GetQuizOfTheDayRow struct {
	QuizID        int64          `json:"quiz_id"`
	ID            sql.NullInt64  `json:"id"`
	Question      sql.NullString `json:"question"`
	CorrectAnswer sql.NullString `json:"correct_answer"`
	Timestamp     sql.NullTime   `json:"timestamp"`
	IsActive      sql.NullBool   `json:"is_active"`
	AAnswer       sql.NullString `json:"a_answer"`
	BAnswer       sql.NullString `json:"b_answer"`
	CAnswer       sql.NullString `json:"c_answer"`
	DAnswer       sql.NullString `json:"d_answer"`
}

func (q *Queries) GetQuizOfTheDay(ctx context.Context) (GetQuizOfTheDayRow, error) {
	row := q.db.QueryRowContext(ctx, getQuizOfTheDay)
	var i GetQuizOfTheDayRow
	err := row.Scan(
		&i.QuizID,
		&i.ID,
		&i.Question,
		&i.CorrectAnswer,
		&i.Timestamp,
		&i.IsActive,
		&i.AAnswer,
		&i.BAnswer,
		&i.CAnswer,
		&i.DAnswer,
	)
	return i, err
}

const getQuizes = `-- name: GetQuizes :many
SELECT quiz.id as quiz_id, questions.id, questions.question, questions.correct_answer, questions.timestamp, questions.is_active, questions.a_answer, questions.b_answer, questions.c_answer, questions.d_answer
FROM quiz
    LEFT JOIN questions on questions.id = quiz.q_id
WHERE
    quiz.is_active = 1
`

type GetQuizesRow struct {
	QuizID        int64          `json:"quiz_id"`
	ID            sql.NullInt64  `json:"id"`
	Question      sql.NullString `json:"question"`
	CorrectAnswer sql.NullString `json:"correct_answer"`
	Timestamp     sql.NullTime   `json:"timestamp"`
	IsActive      sql.NullBool   `json:"is_active"`
	AAnswer       sql.NullString `json:"a_answer"`
	BAnswer       sql.NullString `json:"b_answer"`
	CAnswer       sql.NullString `json:"c_answer"`
	DAnswer       sql.NullString `json:"d_answer"`
}

func (q *Queries) GetQuizes(ctx context.Context) ([]GetQuizesRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuizes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuizesRow
	for rows.Next() {
		var i GetQuizesRow
		if err := rows.Scan(
			&i.QuizID,
			&i.ID,
			&i.Question,
			&i.CorrectAnswer,
			&i.Timestamp,
			&i.IsActive,
			&i.AAnswer,
			&i.BAnswer,
			&i.CAnswer,
			&i.DAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, timestamp FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Timestamp,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, timestamp FROM users where username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Timestamp,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, timestamp FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordAttempt = `-- name: RecordAttempt :one
INSERT INTO
    attempts (
        user_id,
        quiz_id,
        answer,
        is_correct
    )
VALUES (?, ?, ?, ?) RETURNING id, user_id, quiz_id, answer, is_correct, timestamp
`

type RecordAttemptParams struct {
	UserID    int64        `json:"user_id"`
	QuizID    int64        `json:"quiz_id"`
	Answer    string       `json:"answer"`
	IsCorrect sql.NullBool `json:"is_correct"`
}

func (q *Queries) RecordAttempt(ctx context.Context, arg RecordAttemptParams) (Attempt, error) {
	row := q.db.QueryRowContext(ctx, recordAttempt,
		arg.UserID,
		arg.QuizID,
		arg.Answer,
		arg.IsCorrect,
	)
	var i Attempt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuizID,
		&i.Answer,
		&i.IsCorrect,
		&i.Timestamp,
	)
	return i, err
}

const updateLeaderboard = `-- name: UpdateLeaderboard :exec
INSERT INTO
    leader_board (user_id, total_score)
VALUES (?, ?)
ON CONFLICT (user_id) DO
UPDATE
SET
    total_score = total_score + excluded.total_score,
    last_updated = CURRENT_TIMESTAMP
`

type UpdateLeaderboardParams struct {
	UserID     int64         `json:"user_id"`
	TotalScore sql.NullInt64 `json:"total_score"`
}

func (q *Queries) UpdateLeaderboard(ctx context.Context, arg UpdateLeaderboardParams) error {
	_, err := q.db.ExecContext(ctx, updateLeaderboard, arg.UserID, arg.TotalScore)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET username = ?, email = ? where id = ? RETURNING id, username, email, timestamp
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Username, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Timestamp,
	)
	return i, err
}
