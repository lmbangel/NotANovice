// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: quiz.sql

package db

import (
	"context"
	"database/sql"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (question, answer) VALUES (?, ?)
RETURNING id, question, answer, timestamp, is_active
`

type CreateQuestionParams struct {
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.Question, arg.Answer)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Answer,
		&i.Timestamp,
		&i.IsActive,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email) VALUES (?, ?)
RETURNING id, username, email, timestamp
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Timestamp,
	)
	return i, err
}

const getAttemptByID = `-- name: GetAttemptByID :one
SELECT id, user_id, quiz_id, answer, is_correct, timestamp FROM attempts WHERE id = ?
`

func (q *Queries) GetAttemptByID(ctx context.Context, id int64) (Attempt, error) {
	row := q.db.QueryRowContext(ctx, getAttemptByID, id)
	var i Attempt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuizID,
		&i.Answer,
		&i.IsCorrect,
		&i.Timestamp,
	)
	return i, err
}

const getAttempts = `-- name: GetAttempts :many
SELECT id, user_id, quiz_id, answer, is_correct, timestamp FROM attempts
`

func (q *Queries) GetAttempts(ctx context.Context) ([]Attempt, error) {
	rows, err := q.db.QueryContext(ctx, getAttempts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attempt
	for rows.Next() {
		var i Attempt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.QuizID,
			&i.Answer,
			&i.IsCorrect,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttemptsByUserID = `-- name: GetAttemptsByUserID :many
SELECT id, user_id, quiz_id, answer, is_correct, timestamp FROM attempts WHERE user_id = ?
`

func (q *Queries) GetAttemptsByUserID(ctx context.Context, userID int64) ([]Attempt, error) {
	rows, err := q.db.QueryContext(ctx, getAttemptsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attempt
	for rows.Next() {
		var i Attempt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.QuizID,
			&i.Answer,
			&i.IsCorrect,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, question, answer, timestamp, is_active FROM questions WHERE id = ?
`

func (q *Queries) GetQuestion(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Answer,
		&i.Timestamp,
		&i.IsActive,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, timestamp FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Timestamp,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, timestamp FROM users where username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Timestamp,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, timestamp FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordAttempt = `-- name: RecordAttempt :one
INSERT INTO attempts (user_id, quiz_id, answer, is_correct)
VALUES (?, ?, ?, ?)
RETURNING id, user_id, quiz_id, answer, is_correct, timestamp
`

type RecordAttemptParams struct {
	UserID    int64        `json:"user_id"`
	QuizID    int64        `json:"quiz_id"`
	Answer    string       `json:"answer"`
	IsCorrect sql.NullBool `json:"is_correct"`
}

func (q *Queries) RecordAttempt(ctx context.Context, arg RecordAttemptParams) (Attempt, error) {
	row := q.db.QueryRowContext(ctx, recordAttempt,
		arg.UserID,
		arg.QuizID,
		arg.Answer,
		arg.IsCorrect,
	)
	var i Attempt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuizID,
		&i.Answer,
		&i.IsCorrect,
		&i.Timestamp,
	)
	return i, err
}

const updateLeaderboard = `-- name: UpdateLeaderboard :exec
INSERT INTO leader_board (user_id, total_score)
VALUES (?, ?)
ON CONFLICT(user_id) DO UPDATE
SET total_score = total_score + excluded.total_score,
    last_updated = CURRENT_TIMESTAMP
`

type UpdateLeaderboardParams struct {
	UserID     int64         `json:"user_id"`
	TotalScore sql.NullInt64 `json:"total_score"`
}

func (q *Queries) UpdateLeaderboard(ctx context.Context, arg UpdateLeaderboardParams) error {
	_, err := q.db.ExecContext(ctx, updateLeaderboard, arg.UserID, arg.TotalScore)
	return err
}
